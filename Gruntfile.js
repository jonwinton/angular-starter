/*jshint node:true, laxbreak:true */
'use strict';

module.exports = function(grunt) {

    // -- Plugins --------------------------------------------------------------

    // Intelligently autoloads `grunt-*` plugins from the package dependencies.
    require('load-grunt-tasks')(grunt);

    // Adds better support for defining options.
    require('nopt-grunt')(grunt);

    // Uncomment the next line to have grunt report the time it takes for tasks
    // to run so targets for optimization may be identified.
    // require('time-grunt')(grunt);

    // -- Options --------------------------------------------------------------

    grunt.initOptions({
        prod: {
            info: 'Whether this is a production build.',
            type: Boolean
        },
        stage: {
            info: 'Whether this is a staging build.',
            type: Boolean
        },
        maps: {
            info: 'Whether to generate source maps for compressed files.',
            type: Boolean
        }
    });

    // All builds are considered to be development builds, unless they're not.
    grunt.option('dev', !grunt.option('prod') && !grunt.option('stage'));

    // -- Configuration --------------------------------------------------------

    grunt.initConfig({

        // -- Metadata ---------------------------------------------------------

        // This will load the `package.json` file so we can have access to the
        // project metadata such as name and version number.
        pkg: require('./package.json'),

        // This will load the `build-env.js` file so we can have access to the
        // project environment configuration and constants.
        env: require('./build-env'),

        // A comment block that will be prefixed to all our minified code files.
        // Gets the name and version from the above loaded `package.json` file.
        // How to use: '<%= banner %>'
        banner: [
            '',
            ' * THIS FILE HAS BEEN GENERATED BY AN AUTOMATED TOOL.',
            ' * DO NOT MODIFY DIRECTLY. INSTEAD, MODIFY THE APPROPRIATE SOURCE CODE.',
            ' *',
            ' * <%= pkg.name %> v<%= pkg.version %>' + (grunt.option('dev') ? ' (dev)' : ''),
            ' * <%= pkg.description %>',
            ' * Build Date: <%= grunt.template.today("yyyy-mm-dd") %>',
            ''
        ].join('\n'),

        // Generate a shared set of configurations for use in Sass, Handlebars
        // and RequireJS files
        shared_config: { // jshint ignore:line
            default: {
                options: {
                    name: 'GLOBAL_CONFIG',
                    cssFormat: 'uppercase',
                    jsFormat: 'camelcase',
                    amd: true
                },
                src: './src/assets/globalVars.json',
                dest: [
                    '<%= env.DIR_SRC %>/assets/less/helpers/_globalVars.less',
                    '<%= env.DIR_SRC %>/assets/data/globalVars.js'
                ]
            }
        },

        // -- Utility Tasks ----------------------------------------------------

        // Automatically removes generated files and directories. Useful for
        // rebuilding the project with fresh copies of everything.
        clean: {
            options: {
                force: '<%= env.UNSAFE_MODE %>'
            },
            dest: ['<%= env.DIR_DEST %>'],
            docs: ['<%= env.DIR_DOCS %>'],
            tmp: ['<%= env.DIR_TMP %>'],
            installed: [
                'tools/node-*',
                '<%= env.DIR_BOWER %>',
                '<%= env.DIR_NPM %>'
            ]
        },

        // Copies any files that should be moved to the destination directory
        // that are not already handled by another task.
        copy: {
            data: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    src: ['assets/data/**'],
                    dest: '<%= env.DIR_DEST %>'
                }]
            },
            fontawesome: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    src: ['assets/vendor/fontawesome/**'],
                    dest: '<%= env.DIR_DEST %>'
                }]
            },
            media: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    src: ['assets/media/**'],
                    dest: '<%= env.DIR_DEST %>'
                }]
            },
            server: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    src: [
                        '**/*.{php,rb,py,jsp,asp,aspx,cshtml,txt}',
                        '!assets/vendor/**'
                    ],
                    dest: '<%= env.DIR_DEST %>'
                }]
            },
            scripts: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    dest: '<%= env.DIR_DEST %>',
                    /*jshint -W014 */
                    src: (grunt.option('maps') || grunt.option('no-dev'))
                       ? ['assets/scripts/config.js', 'assets/vendor/requirejs/require.js']
                       : ['assets/scripts/**/*.js', 'assets/vendor/**/*.js', 'assets/scripts/**/*.html']
                    /*jshint +W014 */
                }]
            }
        },

        // YUIDoc plugin that will generate our JavaScript documentation.
        yuidoc: {
            compile: {
                name: '<%= pkg.name %>',
                description: '<%= pkg.description %>',
                version: '<%= pkg.version %>',
                url: '<%= pkg.homepage %>',
                options: {
                    paths: '<%= env.DIR_SRC %>',
                    outdir: '<%= env.DIR_DOCS %>',
                    themedir: './node_modules/nerdery-yuidoc-theme'
                }
            }
        },

        hologram: {
            generate: {
                options: {
                    config: './hologram_config.yml'
                }
            }
        },

        // -- Lint Tasks -------------------------------------------------------

        // Verifies that style files conform to our standards.
        csslint: {
            options: {
                csslintrc: '.csslintrc'
            },
            all: {
                src: [
                    '<%= env.DIR_DEST %>/assets/styles/**/*.css'
                ]
            }
        },

        // Verifies that script files conform to our standards.
        jshint: {
            options: {
                jshintrc: '.jshintrc'
            },
            all: {
                src: [
                    'Gruntfile.js',
                    '<%= env.DIR_SRC %>/assets/scripts/**/*.js',
                    '!<%= env.DIR_SRC %>/assets/scripts/**/*.spec.js'
                ]
            }
        },

        // -- Markup Tasks -----------------------------------------------------

        includes: {
            all: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>',
                    dest: '<%= env.DIR_TMP %>',
                    ext: '.html',
                    src: [
                        '*.html',
                        '!assets/**',
                        '!templates/**'
                    ]
                }]
            }
        },

        prettify: {
            options: {
                indent: 4,
                wrap_line_length: 999999, // jshint ignore:line
                indent_inner_html: false, // jshint ignore:line
                unformatted: [
                    'a', 'b', 'code', 'i', 'p',
                    'pre', 'small', 'span',
                    'sub', 'sup', 'u', 'textarea'
                ]
            },
            all: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_TMP %>',
                    dest: '<%= env.DIR_DEST %>',
                    src: ['**/*.html']
                }]
            }
        },

        // -- Style Tasks ------------------------------------------------------

        less: {
            all: {
                files: [{
                    expand: true,
                    cwd: '<%= env.DIR_SRC %>/assets/less',
                    src: ['*.less'],
                    dest: '<%= env.DIR_DEST %>/assets/styles',
                    ext: '.css'
                }],
                options: {
                    cleancss: (grunt.option('prod') ? true : false),
                    compress: (grunt.option('prod') ? true : false)
                }
            }
        },

        // -- Script Tasks -----------------------------------------------------

        // Bower plugin to automatically wire up bower modules into the
        // RequireJS config file.
        bower: {
            main: {
                // Path of shared configuration file
                rjsConfig: '<%= env.DIR_SRC %>/assets/scripts/config.js'
            }
        },

        // RequireJS plugin that will use uglify2 to build and minify our
        // JavaScript, templates and any other data we include in the require
        // files.
        requirejs: {
            options: {
                // Path of source scripts, relative to this build file
                baseUrl: '<%= env.DIR_SRC %>/assets/scripts',

                // Whether to generate source maps for easier debugging of
                // concatenated and minified code in the browser.
                generateSourceMaps: grunt.option('maps'),

                // Whether to preserve comments with a license. Not needed
                // when, and incompatible with, generating a source map.
                preserveLicenseComments: grunt.option('no-maps'),

                // Allow `'use strict';` be included in the RequireJS files.
                useStrict: true,

                // Comments that start with //>> are build pragmas. Exmaple:
                //
                //     //>>includeStart("isDev", pragmas.isDev);
                //     ... debugging code here ...
                //     //>>includeEnd("isDev");
                //
                pragmas: {
                    isProd: grunt.option('prod'),
                    isStage: grunt.option('stage'),
                    isDev: grunt.option('dev')
                },

                // 'none' if you do not want to uglify
                optimize: (grunt.option('maps') || grunt.option('no-dev')) ? 'uglify2' : 'none',

                // Minification options
                uglify2: {
                    output: {
                        beautify: false,
                        comments: false
                    },
                    compress: {
                        sequences: false,
                        global_defs: { // jshint ignore:line
                            DEBUG: false
                        }
                    },
                    warnings: false,
                    mangle: true
                }
            },
            main: {
                options: {
                    // Path of shared configuration file
                    mainConfigFile: '<%= env.DIR_SRC %>/assets/scripts/config.js',

                    // Name of input script (.js extension inferred)
                    name: 'main',

                    // Path of final build script output
                    out: '<%= env.DIR_DEST %>/assets/scripts/main.js'
                }
            }
        },

        // -- Task Helpers -----------------------------------------------------

        usebanner: {
            options: {
                position: 'top',
                linebreak: true
            },
            markup: {
                options: {
                    banner: '<!--<%= banner %>-->\n'
                },
                files: {
                    src: [
                        '<%= env.DIR_DEST %>/**/*.html',
                        '!<%= env.DIR_DEST %>/assets/scripts/*.html'
                    ]
                }
            },
            styles: {
                options: {
                    banner: '/*!<%= banner %> */\n'
                },
                files: {
                    src: [ '<%= env.DIR_DEST %>/assets/styles/**/*.css' ]
                }
            },
            scripts: {
                options: {
                    banner: '/*!<%= banner %> */\n'
                },
                files: {
                    src: [ '<%= env.DIR_DEST %>/assets/scripts/**/*.js' ]
                }
            }
        },

        // Instead of running a server preprocessor, files and directories may
        // be watched for changes and have associated tasks run automatically
        // when you save your changes. This is compatible with the LiveReload
        // api, so you may use their free browser extensions to reload pages
        // after watch tasks complete. No purchase neccessary:
        // http://go.livereload.com/extensions
        watch: {
            options: {
                event: 'all',
                livereload: true
            },
            grunt: {
                files: ['Gruntfile.js'],
                tasks: ['build']
            },
            media: {
                files: ['<%= env.DIR_SRC %>/assets/media/**'],
                tasks: ['media']
            },
            server: {
                files: ['<%= env.DIR_SRC %>/**/*.{php,rb,py,jsp,asp,aspx,cshtml,txt}'],
                tasks: ['server']
            },
            markup: {
                files: ['<%= env.DIR_SRC %>/**/*.html'],
                tasks: ['markup']
            },
            styles: {
                files: ['<%= env.DIR_SRC %>/assets/less/**/*.less'],
                tasks: ['styles', 'styleguide']
            },
            scripts: {
                files: [
                    '<%= env.DIR_SRC %>/assets/scripts/**/*.{js,html}',
                    '<%= env.DIR_SRC %>/assets/data/**/*.{js,json}',
                    '<%= env.DIR_SRC %>/*.json'
                ],
                tasks: ['scripts']
            },
            globalVars: {
                files: [
                    '<%= env.DIR_SRC %>/assets/*.json'
                ],
                tasks: ['shared_config']
            },
            data: {
                files: [
                    '<%= env.DIR_SRC %>/assets/data/**'
                ],
                tasks: ['data']
            },
            styleguide: {
                files: [
                    './styleguide_assets/**'
                ],
                tasks: ['styleguide']
            }
        }
    });

    // -- Tasks ----------------------------------------------------------------
    if (grunt.option('dev')) {
        // Define the default task for development.
        // Run `grunt`
        grunt.registerTask('default', ['shared_config', 'build', 'styleguide']);
    }
    else if (grunt.option('stage')) {
        // Default task for staging.
        // Run `grunt --stage`
        grunt.registerTask('default', ['shared_config', 'build','lint']);
    }
    else if (grunt.option('prod')) {
        // Default task for production.
        // Run `grunt --prod`
        grunt.registerTask('default', ['shared_config', 'build', 'docs', 'lint']);
    }

    // Install task. Handles tasks that should happen right after npm and bower
    // modules are installed or updated. Run with `grunt install`.
    grunt.registerTask('install', ['bower']);

    // Custom tasks.
    // Can be referenced from `watch` tasks
    // May also be run manually with `grunt [task-name]`
    grunt.registerTask('build', ['clean:dest', 'media', 'server', 'markup', 'styles', 'scripts', 'clean:tmp']);
    grunt.registerTask('lint', ['force:on', 'csslint', 'jshint', 'force:reset']);
    grunt.registerTask('docs', ['clean:docs', 'yuidoc', 'clean:tmp']);
    grunt.registerTask('media', ['copy:media']);
    grunt.registerTask('server', ['copy:server']);
    grunt.registerTask('markup', ['includes', 'prettify']);
    grunt.registerTask('styles', ['less', 'copy:fontawesome', 'usebanner:styles']);
    grunt.registerTask('data', ['copy:data']);
    grunt.registerTask('fontawesome', ['copy:fontawesome']);
    grunt.registerTask('styleguide', ['hologram']);
    if (grunt.option('no-maps') || grunt.option('dev')) {
        grunt.registerTask('scripts', ['copy:scripts', 'usebanner:scripts']);
    } else {
        grunt.registerTask('scripts', ['requirejs:main', 'copy:scripts', 'usebanner:scripts']);
    }
};
